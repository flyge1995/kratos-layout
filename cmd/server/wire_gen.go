// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/flyge1995/kratos-extend/danta"
	"github.com/flyge1995/kratos-extend/log/zap"
	"github.com/go-kratos/kratos-layout/internal/server"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp() (*kratos.App, func(), error) {
	context, cleanup := danta.NewContext()
	config, err := inputConfig()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	zapConfig := inputLogger(config)
	kv := zap.NewKV(zapConfig)
	logger, cleanup2 := zap.NewLumberjack(zapConfig)
	zapLogger, cleanup3, err := zap.NewZap(zapConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	logLogger := zap.NewLogger(kv, zapLogger)
	grpcServer := server.NewGRPCServer(config, logLogger)
	httpServer := server.NewHTTPServer(config, logLogger)
	app := newApp(context, logLogger, grpcServer, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
